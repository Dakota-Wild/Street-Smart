{"remainingRequest":"C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\src\\views\\Dashboard.vue?vue&type=template&id=22ba47ca&","dependencies":[{"path":"C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\src\\views\\Dashboard.vue","mtime":1603155113082},{"path":"C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\there\\Documents\\cpp\\se\\street-smart\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}